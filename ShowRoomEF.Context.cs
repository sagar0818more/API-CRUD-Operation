//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class DemoDBConnectionString : DbContext
    {
        //static string connectionString = @"Data Source=UE-DEV-LT7\MSQLSERVER; Initial Catalog=DemoDB;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework;";
        public DemoDBConnectionString()
            : base("name = DemoDBConnectionString")//"name=DemoDBConnectionString"
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<Tbl_Product> Tbl_Product { get; set; }

        public virtual ObjectResult<sp_Product_Result> sp_Product(Nullable<int> productId, string productName, Nullable<int> quantity, Nullable<int> price, string flag)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));

            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));

            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));

            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));

            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Product_Result>("sp_Product", productIdParameter, productNameParameter, quantityParameter, priceParameter, flagParameter);
        }
    }
}
